package io.github.sdsstudios.nvidiagpumonitor

/*
    private fun createJson0() {
        //an extension over string (support GET, PUT, POST, DELETE with httpGet(), httpPut(), httpPost(), httpDelete())
        "https://api.nordvpn.com/server".httpGet().responseJson { request, response, result ->
            when (result) {
                is Result.Failure -> {
                    val ex = result.getException()
                }
                is Result.Success -> {
                    operator fun JSONArray.iterator(): Iterator<JSONObject> = (0 until length()).asSequence().map { get(it) as JSONObject }.iterator()
                    val jsonObj = JSONObject()
                    val content = result.get().array() //JSONArray
                    for (res in content) {
                        val country = res.getString("domain").take(2)

                        var pass = country.equals(country_code,true)

                        if (!pass) {
                            //continue
                        }

                        pass = when {
                            p2p -> false
                            dedicated -> false
                            double_vpn -> false
                            tor_over_vpn -> false
                            anti_ddos -> false
                            else -> true
                        }

                        if (!pass) {
                            val categories = res.getJSONArray("categories")

                            for (category in categories) {
                                val name = category.getString("name")

                                if (p2p and name.equals("P2P", true)) {
                                    pass = true
                                    break
                                }
                                else if (dedicated and name.equals("Dedicated IP", true)) {
                                    pass = true
                                    break
                                }
                                else if (double_vpn and name.equals("Double VPN", true)) {
                                    pass = true
                                    break
                                }
                                else if (tor_over_vpn and name.equals("Obfuscated Servers", true)) {
                                    pass = true
                                    break
                                }
                                else if (anti_ddos and name.equals("Anti DDoS", true)) {
                                    pass = true
                                    break
                                }
                            }
                        }

                        if (!pass) {
                            continue
                        }

                        val location = res.getJSONObject("location")

                        var jsonArr = jsonObj.optJSONArray(location.toString())
                        if (jsonArr == null) {
                            jsonArr = JSONArray()
                            jsonArr.put(res)
                            jsonObj.put(location.toString(), jsonArr)
                        }
                        else {
                            jsonArr.put(res)
                        }
                    }

                    try {
                        val keys = jsonObj.keys()
                        while (keys.hasNext()) {
                            val key = keys.next()
                            val value = jsonObj.getJSONArray(key)
                            val location = value.getJSONObject(0).getJSONObject("location")
                            val marker = mMap.addMarker(MarkerOptions().position(LatLng(location.getDouble("lat"), location.getDouble("long"))).visible(false))
                            marker.tag = value

                            items.add(marker)
                        }
                    } catch (e: JSONException) {
                        error(e)
                    }

//                    val file = File(this.getExternalFilesDir(null),"output.json")
//                    file.writeText(jsonObj.toString())
//                    debug(file)
                }
            }
        }
    }

    @WorkerThread
    @Suppress("MagicNumber")
    fun createJson1(): JSONObject? {
        val json1 = JSONObject()

        for (server in listOf("https://api.ipdata.co", "http://ip-api.com/json")) {
            val timeout = 500
            val timeoutRead = 500
            // An extension over string (support GET, PUT, POST, DELETE with httpGet(), httpPut(), httpPost(), httpDelete())
            val (_, _, result) = server.httpGet().timeout(timeout).timeoutRead(timeoutRead).responseJson()
            when (result) {
                is Result.Failure -> {
                    Log.error(result.getException().toString())
                }
                is Result.Success -> {
                    val content = result.get().obj()
                    //Log.info(content.toString())
                    var flag = content.optString("country_code")
                    var country = content.optString("country_name")
                    val city = content.optString("city")
                    var lat = content.optDouble("latitude", 0.0)
                    var lon = content.optDouble("longitude", 0.0)
                    val emoji = content.optString("emoji_flag")
                    var ip = content.optString("ip")
                    val threat = content.optJSONObject("threat")

                    if (flag.isEmpty()) flag = content.optString("countryCode")
                    if (country.isEmpty()) country = content.optString("country")
                    //if (city.isEmpty()) city = content.optString("city")
                    if (lat == 0.0) lat = content.optDouble("lat", 0.0)
                    if (lon == 0.0) lon = content.optDouble("lon", 0.0)
                    //if (emoji.isEmpty()) emoji = content.optString("emoji_flag")
                    if (ip.isEmpty()) ip = content.optString("query")
                    //if (threat == null) threat = content.optJSONObject("threat")
                    if (json1.optString("flag").isEmpty()) json1.put("flag", flag)
                    if (json1.optString("country").isEmpty()) json1.put("country", country)
                    if (json1.optString("city").isEmpty()) json1.put("city", city)
                    if (json1.optDouble("latitude", 0.0) == 0.0) json1.put("latitude", lat)
                    if (json1.optDouble("longitude", 0.0) == 0.0) json1.put("longitude", lon)
                    if (json1.optString("emoji_flag").isEmpty()) json1.put("emoji_flag", emoji)
                    if (json1.optString("ip").isEmpty()) json1.put("ip", ip)
                    if (json1.optJSONObject("threat") == null) json1.putOpt("threat", threat)
                    //break
                }
            }
        }

        return if (json1.length() > 0) json1 else null
    }
*/

            /*
            if (preferences.getString("pref_country_values", "") == "") {
                val list = Array(size = array.size) { false }.toCollection(ArrayList())
                val editor = PrintArray.putListBoolean("pref_country_values", list, preferences)
                editor.commit()
            }

            val checkedItems = PrintArray.getListBoolean("pref_country_values", preferences).toBooleanArray()

            PrintArray.show( "pref_country_values", array, checkedItems, it, preferences)
            */

 try {
                                    val gcd =  Geocoder(it, Locale.getDefault())
                                    val addresses = gcd.getFromLocation(location.latitude, location.longitude, 1)
                                    if (addresses != null && !addresses.isEmpty()) {
                                        country = addresses[0].countryCode
                                    }
                                } catch (e: Exception) {
                                    e.printStackTrace()
                                }

    <!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
    <!--android:id="@+id/select_all_container"-->
    <!--android:layout_width="match_parent"-->
    <!--android:layout_height="wrap_content"-->
    <!--android:layout_marginTop="@dimen/layout_margin"-->
    <!--android:background="?attr/selectableItemBackground"-->
    <!--android:orientation="horizontal">-->

    <!--<CheckBox-->
    <!--android:id="@+id/select_all_checkbox"-->
    <!--android:layout_width="wrap_content"-->
    <!--android:layout_height="wrap_content"-->
    <!--android:layout_gravity="center_vertical"-->
    <!--android:clickable="false" />-->

    <!--<TextView-->
    <!--android:id="@+id/select_all_text"-->
    <!--android:layout_width="match_parent"-->
    <!--android:layout_height="wrap_content"-->
    <!--android:layout_gravity="center_vertical"-->
    <!--android:text="@string/select_all"-->
    <!--android:textAllCaps="true"-->
    <!--</LinearLayout>-->

    <string name="select_all">select all</string>
