// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.fuel_version = '2.2.1'
    ext.kotlin_version = '1.3.72'
    ext.kotlinx_io_version = '0.1.16'
    ext.ktor_version = '1.3.1'
    ext.nav_version = '2.2.1'
    ext.slf4j_version = '1.7.30'
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"

        classpath 'com.google.android.gms:oss-licenses-plugin:0.10.1'

        classpath 'com.google.android.gms:strict-version-matcher-plugin:1.2.1'

        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:1.0.2'

        classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'

        classpath 'com.netflix.nebula:gradle-lint-plugin:16.15.6'

        classpath 'io.fabric.tools:gradle:1.31.2'

        classpath 'gradle.plugin.com.github.konifar.gradle:plugin:0.3.3'

        classpath 'com.gladed.androidgitversion:gradle-android-git-version:0.4.13'

        classpath 'io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.5.1'

        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:1.1.1'

        //classpath 'com.google.gms:google-services:4.3.3'

        // NOTE: Use app/src/release/res/values/values.xml instead of google-services plugin

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
        flatDir {
            dirs 'libs'
        }
    }

    apply plugin: 'idea'

    idea.module {
        excludeDirs += file('.gitattributes')
        excludeDirs += file('Gemfile')
        excludeDirs += file('Gemfile.lock')
        excludeDirs += file('LICENSE')
        excludeDirs += file('mapfile.xml')

        excludeDirs += file('app/.cxx')
        excludeDirs += file('app/.externalNativeBuild')
        excludeDirs += file('app/src/main/java/com/almworks')
        excludeDirs += file('app/src/main/java/io/requery')
        excludeDirs += file('app/src/main/java/org/javolution')
        excludeDirs += file('app/src/main/java/org/sqlite')
        excludeDirs += file('app/src/main/jni')
        excludeDirs += file('app/src/main/obj')

        excludeDirs += file('config/detekt')
        excludeDirs += file('config/checkstyle')
        excludeDirs += file('config/lib')

        excludeDirs += file('fastlane')
        excludeDirs += file('svg')
        excludeDirs += file('tiles')
        excludeDirs += file('world')
    }

    apply plugin: 'nebula.lint'

    gradleLint {
        alwaysRun = false
        autoLintAfterFailure = false
        criticalRules = ['unused-dependency']
        rules = ['archaic-wrapper', 'unused-dependency', 'duplicate-dependency-class', 'minimum-dependency-version', 'overridden-dependency-version', 'unused-exclude-by-dep']
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            //options.compilerArgs << '-Xlint:all'
            options.deprecation = true
            options.failOnError = true
            options.errorprone {
                //allDisabledChecksAsWarnings = true
                disableAllChecks = true
                disable('AlmostJavadoc')
                disable('AndroidJdkLibsChecker')
                disable('BooleanParameter')
                disable('Java7ApiChecker')
                disable('MissingSummary')
                //warn('Nopen')
                //warn('NullAway')
                disable('StringSplitter')
                disable('UnnecessaryDefaultInEnumSwitch')
                disable('Var')
                option('NullAway:AnnotatedPackages', 'com.antoniocarlon,com.getsixtyfour,io.github.getsixtyfour')
                excludedPaths = '.*/app/build/.*|.*/almworks/.*|.*/requery/.*|.*/javolution/.*|.*/sqlite/.*'
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task unzip(type: Copy) {
    from zipTree("${project.rootDir}/sqlite-android-3240000/sqlite-android-3240000.aar")
    into "${project.rootDir}/app/src/main/jniLibs/"
    include 'jni/*/*.so'

    eachFile { details ->
        details.setRelativePath new RelativePath(true, details.path - 'jni/')
    }

    includeEmptyDirs = false
}

task unzip2(type: Copy) {
    from zipTree("${project.rootDir}/sqlite-android-3240000/sqlite-android-3240000.aar")
    into "${project.rootDir}/app/src/main/libs/"
    include 'classes.jar'

    eachFile { details ->
        details.setRelativePath new RelativePath(true, 'libsqliteX.jar')
    }
}
